[{"/home/ravi/practice/trackinterview/app/src/index.js":"1","/home/ravi/practice/trackinterview/app/src/App.js":"2","/home/ravi/practice/trackinterview/app/src/components/Home.js":"3","/home/ravi/practice/trackinterview/app/src/components/Dashboard.js":"4","/home/ravi/practice/trackinterview/app/src/config/Api.js":"5","/home/ravi/practice/trackinterview/app/src/components/JobCMS.js":"6","/home/ravi/practice/trackinterview/app/src/components/Job.js":"7","/home/ravi/practice/trackinterview/app/src/components/ActivityModal.js":"8","/home/ravi/practice/trackinterview/app/src/components/Login.js":"9"},{"size":233,"mtime":1612527319796,"results":"10","hashOfConfig":"11"},{"size":2065,"mtime":1613677684821,"results":"12","hashOfConfig":"11"},{"size":1138,"mtime":1613680781286,"results":"13","hashOfConfig":"11"},{"size":2714,"mtime":1613677815115,"results":"14","hashOfConfig":"11"},{"size":4622,"mtime":1613679146185,"results":"15","hashOfConfig":"11"},{"size":10384,"mtime":1612554874473,"results":"16","hashOfConfig":"11"},{"size":4879,"mtime":1612546905743,"results":"17","hashOfConfig":"11"},{"size":3792,"mtime":1612545801293,"results":"18","hashOfConfig":"11"},{"size":3491,"mtime":1612729491057,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1khwem1",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/home/ravi/practice/trackinterview/app/src/index.js",[],["45","46"],"/home/ravi/practice/trackinterview/app/src/App.js",[],"/home/ravi/practice/trackinterview/app/src/components/Home.js",["47"],"import React, { useEffect, useState } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport Api from \"../config/Api\";\n\nconst Home = () => {\n  const [user,setUser]=useState(JSON.parse(localStorage.getItem(\"data\")||\"{}\"));\n  const [stats,setStats]=useState([]);\n\n  const jobStatus=new Map();\n  jobStatus.set(\"interviewing\",\"Interviewing\");\n  jobStatus.set(\"response\",\"Got Response\");\n  jobStatus.set(\"applied\",\"Applied\");\n  jobStatus.set(\"waiting\",\"Waiting\");\n  jobStatus.set(\"rejected\",\"Got Rejected\");\n  jobStatus.set(\"offer_recieved\",\"Offer Received\");\n  jobStatus.set(\"decline\",\"Declined Offer\");\n  jobStatus.set(\"pending\",\"Pending\");\n\n  var getStats=()=>{\n    Api.getJobStats((data)=>{\n      setStats(data.data);\n    });\n  };\n  useEffect(()=>{\n    getStats();\n  },[]);\n  return (\n    <Container>\n      <h3>Hi {user.name}!</h3>\n      Welcome to Track Interview App!\n\n      {stats.map((status)=>{\n        return <Link className=\"quick-links\" to={`/dashboard/${status._id}`}> {jobStatus.get(status._id)} ({status.count})</Link>\n      })}\n    </Container>\n  );\n};\n\nexport default Home;\n","/home/ravi/practice/trackinterview/app/src/components/Dashboard.js",["48"],"import React,{useEffect,useState} from 'react';\nimport { Button, Container, Table } from 'react-bootstrap';\nimport { Link, useParams } from 'react-router-dom';\nimport ReactTimeAgo from 'react-time-ago/commonjs/ReactTimeAgo';\n\nimport Api from '../config/Api';\n\nconst Dashboard = (props)=>{\n    var [jobs,setJobs]=useState([]);\n    var {job_status}= useParams();\n    const getMyJobs=()=>{\n        let params={};\n        if(job_status){\n            params.filter={status:job_status};\n        }\n        Api.getMyJobs(params,(data)=>{\n            if(data.status){\n                setJobs(data.data);\n            }else{\n                //token expired - let's logout. So user can login again.\n                props.logout();\n            }\n        });\n    };\n    \n    const deleteJob=(job)=>{\n        if(window.confirm(`Do you want to delete job \"${job.name} - ${job.company}?`)){\n            var params={};\n            params.job_id=job._id;\n            Api.deleteJob(params,(data)=>{\n                if(data.status){\n                    var newJobs=jobs.filter((e)=>{\n                        return e._id!==job._id\n                    });\n                    setJobs(newJobs);\n                }\n            });\n        }\n    }\n    useEffect(()=>{\n        getMyJobs();\n    },[]);\n    return (\n        <div>\n            <Container>\n                <Button as={Link} to=\"/job-add\" variant=\"outline-primary\" className=\"float-right\">[+] New Job</Button>\n                <h3>Dashboard</h3>\n                <Table striped bordered hover>\n                    <thead>\n                        <tr>\n                            <td>Sr#</td>\n                            <td>Position</td>\n                            <td>Company</td>\n                            <td>Status</td>\n                            <td>Updated</td>\n                            <td>Action</td>\n                        </tr>\n                    </thead>\n                    <tbody>\n                    {jobs.map((job,index)=>{\n                        return (<tr key={job._id}>\n                            <td>{index+1}</td>\n                            <td><Link to={`/job/${job._id}`}>{job.name}</Link></td>\n                            <td>{job.company}</td>\n                            <td>{job.status}</td>\n                            <td><ReactTimeAgo date={new Date(job.updated)} locale=\"en-US\" /></td>\n                            <td><Button as={Link} to={`/job-edit/${job._id}`}>Edit</Button> <Button variant=\"danger\" onClick={(e)=>deleteJob(job)}>Delete</Button></td>\n                        </tr>);\n                    })}\n                    </tbody>\n                </Table>\n            </Container>\n        </div>\n    );\n}\n\nexport default Dashboard;","/home/ravi/practice/trackinterview/app/src/config/Api.js",[],"/home/ravi/practice/trackinterview/app/src/components/JobCMS.js",["49"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Button,\n  Col,\n  Container,\n  Form,\n  FormControl,\n  FormGroup,\n  FormLabel,\n  Row,\n  Alert,\n} from \"react-bootstrap\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport ReactDatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport Api from \"../config/Api\";\n\nconst JobCMS = () => {\n  const history = useHistory();\n  var { job_id } = useParams();\n  const [name, setName] = useState(\"\");\n  const [company, setCompany] = useState(\"\");\n  const [jobURL, setJobURL] = useState(\"\");\n  const [reviewURL, setReviewURL] = useState(\"\");\n  const [linkedinURL, setLinkedinURL] = useState(\"\");\n  const [source, setSource] = useState(\"\");\n  const [skills, setSkills] = useState([]);\n  const [location, setLocation] = useState(\"\");\n  const [minCTC, setMinCTC] = useState(0);\n  const [maxCTC, setMaxCTC] = useState(0);\n  const [notes, setNotes] = useState(\"\");\n  const [HRName, setHRName] = useState(\"\");\n  const [HREmail, setHREmail] = useState(\"\");\n  const [HRPhone, setHRPhone] = useState(\"\");\n  const [appliedDate, setAppliedDate] = useState(new Date());\n  const [status,setStatus]=useState(\"applied\");\n\n  const [alert, setAlert] = useState({ msg: \"\", variant: \"\" });\n\n  var submitForm = (e) => {\n    var body = {};\n    body.name = name;\n    body.company = company;\n    body.job_url = jobURL;\n    body.review_url = reviewURL;\n    body.linkedin_url = linkedinURL;\n    body.source = source;\n    body.skills = skills;\n    body.location = location;\n    body.ctc_min = minCTC;\n    body.ctc_max = maxCTC;\n    body.notes = notes;\n    body.hr = { name: HRName, email: HREmail, phone: HRPhone };\n    if(appliedDate===\"\" || appliedDate===undefined|| appliedDate===null){\n      body.applied = null;\n    }else{\n      body.applied = appliedDate.toString();\n    }\n    body.status=status;\n    if (job_id) {\n      body.job_id = job_id;\n      Api.editJob(body, (response) => {\n        if (response.status) {\n          setAlert({ msg: response.message, variant: \"success\" });\n          history.goBack();\n        } else {\n          setAlert({ msg: response.message, variant: \"danger\" });\n        }\n      });\n    } else {\n      Api.newJob(body, (response) => {\n        if (response.status) {\n          setAlert({ msg: response.message, variant: \"success\" });\n          history.goBack();\n        } else {\n          setAlert({ msg: response.message, variant: \"danger\" });\n        }\n      });\n    }\n  };\n  ///if job_id is present, get job details for EDIT form.\n  useEffect(() => {\n    if (job_id) {\n      Api.getJobDetails(job_id, (response) => {\n        console.log(response);\n        if (response.status) {\n          var { data } = response;\n          setName(data.name);\n          setCompany(data.company);\n          setJobURL(data.job_url);\n          setReviewURL(data.review_url);\n          setLinkedinURL(data.linkedin_url);\n          setSource(data.source);\n          setSkills(data.skills);\n          setLocation(data.location);\n          setMinCTC(data.ctc_min);\n          setMaxCTC(data.ctc_max);\n          setNotes(data.notes);\n          setHRName(data.hr.name);\n          setHREmail(data.hr.email);\n          setHRPhone(data.hr.phone);\n          setAppliedDate(new Date(data.applied));\n          setStatus(data.status);\n        } else {\n          console.error(\"Job not found.\");\n          job_id = undefined;\n        }\n      });\n    }\n  }, []);\n  const arrStatus=[\"pending\",\"applied\",\"response\",\"interviewing\",\"waiting\",\"rejected\",\"offer_recieved\",\"decline\"];\n  return (\n    <Container>\n      <h3>{job_id === undefined ? \"Create New Job\" : \"Edit Job details\"}</h3>\n      <Form>\n        <Row>\n          <Col>\n            <FormGroup>\n              <FormLabel>Job Position</FormLabel>\n              <FormControl\n                type=\"text\"\n                placeholder=\"Enter Job Position\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n              />\n            </FormGroup>\n          </Col>\n          <Col>\n            <Row>\n              <Col>\n                <FormGroup>\n                  <FormLabel>Company</FormLabel>\n                  <FormControl\n                    type=\"text\"\n                    placeholder=\"Enter Company Name\"\n                    value={company}\n                    onChange={(e) => setCompany(e.target.value)}\n                  />\n                </FormGroup>\n              </Col>\n              <Col>\n                <FormGroup>\n                  <FormLabel>Applied On</FormLabel>\n                  <ReactDatePicker\n                    as={FormControl}\n                    selected={appliedDate}\n                    onChange={(dt) =>\n                      setAppliedDate(dt)\n                    }\n                  />\n                </FormGroup>\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <FormGroup>\n              <FormLabel>Job URL</FormLabel>\n              <FormControl\n                type=\"url\"\n                placeholder=\"Enter Job URL\"\n                value={jobURL}\n                onChange={(e) => setJobURL(e.target.value)}\n              />\n            </FormGroup>\n          </Col>\n          <Col>\n            <FormGroup>\n              <FormLabel>LinkedIn URL</FormLabel>\n              <FormControl\n                type=\"text\"\n                placeholder=\"Enter LinkedIn URL\"\n                value={linkedinURL}\n                onChange={(e) => setLinkedinURL(e.target.value)}\n              />\n            </FormGroup>\n          </Col>\n          <Col>\n            <FormGroup>\n              <FormLabel>\n                Review URL <small>(eg. Glassdoor)</small>\n              </FormLabel>\n              <FormControl\n                type=\"url\"\n                placeholder=\"Enter Review URL\"\n                value={reviewURL}\n                onChange={(e) => setReviewURL(e.target.value)}\n              />\n            </FormGroup>\n          </Col>\n\n          <Col>\n            <FormGroup>\n              <FormLabel>Source</FormLabel>\n              <FormControl\n                type=\"text\"\n                placeholder=\"Enter Job Source\"\n                value={source}\n                onChange={(e) => setSource(e.target.value)}\n              />\n            </FormGroup>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <FormGroup>\n              <FormLabel>Skills</FormLabel>\n              <FormControl\n                type=\"text\"\n                placeholder=\"Skills needed for this job\"\n                value={skills.join(\",\")}\n                onChange={(e) => setSkills(e.target.value.split(\",\"))}\n              />\n            </FormGroup>\n          </Col>\n          <Col>\n            <FormGroup>\n              <FormLabel>Job Location</FormLabel>\n              <FormControl\n                type=\"text\"\n                placeholder=\"Enter Job Location\"\n                value={location}\n                onChange={(e) => setLocation(e.target.value)}\n              />\n            </FormGroup>\n          </Col>\n          <Col>\n            <FormGroup>\n              <FormLabel>Minimum CTC</FormLabel>\n              <FormControl\n                type=\"text\"\n                placeholder=\"Minimum CTC\"\n                value={minCTC}\n                onChange={(e) => setMinCTC(e.target.value)}\n              />\n            </FormGroup>\n          </Col>\n          <Col>\n            <FormGroup>\n              <FormLabel>Maximum CTC</FormLabel>\n              <FormControl\n                type=\"text\"\n                placeholder=\"Maximum CTC\"\n                value={maxCTC}\n                onChange={(e) => setMaxCTC(e.target.value)}\n              />\n            </FormGroup>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <FormGroup>\n              <FormLabel>Notes</FormLabel>\n              <FormControl\n                as=\"textarea\"\n                rows=\"3\"\n                placeholder=\"Notes about this Job\"\n                value={notes}\n                onChange={(e) => setNotes(e.target.value)}\n              />\n            </FormGroup>\n          </Col>\n          <Col>\n            <div>HR Contact</div>\n            <Row>\n              <Col>\n                <FormGroup>\n                  <FormControl\n                    type=\"text\"\n                    placeholder=\"HR Name\"\n                    value={HRName}\n                    onChange={(e) => setHRName(e.target.value)}\n                  />\n                </FormGroup>\n              </Col>\n              <Col>\n                <FormGroup>\n                  <FormControl\n                    type=\"email\"\n                    placeholder=\"HR Email Address\"\n                    value={HREmail}\n                    onChange={(e) => setHREmail(e.target.value)}\n                  />\n                </FormGroup>\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                <FormGroup>\n                  <FormControl\n                    type=\"tel\"\n                    placeholder=\"HR Phone Number\"\n                    value={HRPhone}\n                    onChange={(e) => setHRPhone(e.target.value)}\n                  />\n                </FormGroup>\n              </Col>\n              <Col>\n              <FormGroup>\n                <FormControl as=\"select\" onChange={(e) => setStatus(e.target.value)}>{arrStatus.map((sts,index)=>{\n                  return <option key={`x${index}`} value={sts} selected={sts===status}>{sts}</option>;\n                })}</FormControl>\n              </FormGroup>\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Button\n              variant=\"primary\"\n              className=\"mr-3\"\n              onClick={(e) => submitForm(e)}\n            >\n              Save\n            </Button>\n            <Button variant=\"secondary\" onClick={() => history.goBack()}>\n              Cancel\n            </Button>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <br />\n            <Alert\n              show={alert.msg !== \"\"}\n              variant={alert.variant}\n              dismissible\n              onClose={() => setAlert({ msg: \"\", variant: \"\" })}\n            >\n              {alert.msg}\n            </Alert>\n          </Col>\n        </Row>\n      </Form>\n    </Container>\n  );\n};\n\nexport default JobCMS;\n","/home/ravi/practice/trackinterview/app/src/components/Job.js",["50","51"],"import React, { useEffect, useRef, useState } from \"react\";\nimport { Container, Row, Col, Jumbotron, Button, Modal } from \"react-bootstrap\";\nimport { useParams,Link } from \"react-router-dom\";\nimport Api from \"../config/Api\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faLinkedin } from \"@fortawesome/free-brands-svg-icons\";\nimport {\n  faEdit,\n  faExternalLinkSquareAlt,\n  faPlus,\n  faStar,\n  faTrash,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport ReactTimeAgo from \"react-time-ago\";\nimport ActivityModal from \"./ActivityModal\";\n\nconst Job = () => {\n  const { job_id } = useParams();\n  const [job, setJob] = useState({ skills: [], activities: [] });\n  const activityModal = useRef();\n\n  const getJobDetails = () => {\n    Api.getJobDetails(job_id, (resp) => {\n      if (resp.status) {\n        setJob(resp.data);\n      }\n    });\n  };\n\n  useEffect(() => {\n    getJobDetails();\n  }, []);\n  const parentCallback=()=>{\n    getJobDetails();\n  };\n  const deleteActivity=(activity)=>{\n    if(window.confirm(\"Do you want to delete this activity?\")){\n      var params={};\n      params.activity_id=activity._id;\n      Api.deleteActivity(params,(data)=>{\n          if(data.status){\n              var newActivities=job.activities.filter((e)=>{\n                  return e._id!==activity._id\n              });\n              setJob({...job,activities:newActivities});\n          }\n      });\n    }\n  };\n  return (\n    <Container>\n      <hr />\n      <Row>\n        <Col>\n          <Jumbotron>\n            <h3 className=\"company-name\">\n              {job.company} <small>({job.location})</small>\n            </h3>\n            <div className=\"position-name\">\n              {job.name}{\" \"}\n              <small>\n                <a href={job.job_url} target=\"_new\">\n                  {job.source}{\" \"}\n                  <FontAwesomeIcon icon={faExternalLinkSquareAlt} />\n                </a>\n              </small>\n            </div>\n            <div className=\"icon-row\">\n              <a href={job.linkedin_url} target=\"_new\">\n                <FontAwesomeIcon icon={faLinkedin} /> LinkedIn\n              </a>{\" \"}\n              |{\" \"}\n              <a href={job.review_url} target=\"_new\">\n                <FontAwesomeIcon icon={faStar} /> Glassdoor Review\n              </a>{\" \"}\n            </div>\n            <div className=\"skill-row\">\n              {job.skills.map((skill, index) => {\n                return <span className=\"skill-tag\">{skill}</span>;\n              })}\n            </div>\n            <div className=\"ctc-row\">\n              CTC: {job.ctc_min}\n              {job.ctc_max !== \"\" ? \" - \" + job.ctc_max : \"\"}\n            </div>\n          </Jumbotron>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <div className=\"activity-add\">\n            <Button\n              variant=\"success\"\n              className=\"float-right\"\n              onClick={() => activityModal.current.showModal(null)}\n            >\n              <FontAwesomeIcon icon={faPlus} /> New Activity\n            </Button>\n            <Button\n              as={Link}\n              variant=\"warning\"\n              className=\"float-right mr-3\"\n              to={`/job-edit/${job._id}`}\n\n            >\n              <FontAwesomeIcon icon={faEdit} /> Edit\n            </Button>\n            <ActivityModal job={job} ref={activityModal} parentCallback={parentCallback}/>\n          </div>\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"activity-list\">\n          {job.activities.map((activity, index) => {\n            return (\n              <React.Fragment key={index}>\n                <div className=\"activity-box\" >\n                  <div className=\"activity-buttons\">\n                    <Button variant=\"danger\" size=\"sm\" onClick={()=>{ deleteActivity(activity)}}>\n                      <FontAwesomeIcon icon={faTrash} />\n                    </Button>\n                    {\"  \"}\n                    <Button\n                      variant=\"warning\"\n                      size=\"sm\"\n                      onClick={() => activityModal.current.showModal(activity)}\n                    >\n                      <FontAwesomeIcon icon={faEdit} />\n                    </Button>\n                  </div>\n                  <div className=\"activity-head\">\n                    {`${new Date(\n                      activity.stamp\n                    ).toLocaleDateString()} ${new Date(\n                      activity.stamp\n                    ).toLocaleTimeString()}`}{\" \"}\n                    <ReactTimeAgo\n                      date={new Date(activity.stamp)}\n                      locale=\"en-US\"\n                    />\n                  </div>\n                  <div className=\"activity-body\">{activity.body}</div>\n                </div>\n              </React.Fragment>\n            );\n          })}\n        </Col>\n      </Row>\n    </Container>\n  );\n};\nexport default Job;\n","/home/ravi/practice/trackinterview/app/src/components/ActivityModal.js",["52","53"],"import React, { forwardRef, useImperativeHandle, useState } from \"react\";\nimport {\n  Button,\n  Form,\n  FormControl,\n  FormGroup,\n  FormLabel,\n  InputGroup,\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalTitle,\n} from \"react-bootstrap\";\nimport ModalHeader from \"react-bootstrap/esm/ModalHeader\";\nimport ReactDatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport Api from \"../config/Api\";\n\nconst ActivityModal = forwardRef((props, ref) => {\n  const blankActivity = {\n    body: \"\",\n    is_schedule: false,\n    schedule_date: new Date(),\n    schedule_done: false,\n  };\n\n  const [show, setShow] = useState(false);\n  const [isEdit, setISEdit] = useState(false);\n  const [activity, setActivity] = useState(blankActivity);\n  const [date, setDate] = useState(new Date());\n\n  const job = props.job;\n  useImperativeHandle(ref, () => {\n    return {\n      showModal: (oldAct) => {\n        setShow(true);\n        if (oldAct == null) {\n          setISEdit(false);\n          setActivity(blankActivity);\n        } else {\n          setISEdit(true);\n          oldAct.schedule_date = new Date(oldAct.schedule_date);\n          if (oldAct.is_schedule) {\n            oldAct.is_schedule = true;\n          } else {\n            oldAct.is_schedule = false;\n          }\n          if (oldAct.schedule_done) {\n            oldAct.schedule_done = true;\n          } else {\n            oldAct.schedule_done = false;\n          }\n          setActivity(oldAct);\n        }\n      },\n    };\n  });\n  const submitForm = () => {\n    var body = {};\n    body.job_id = job._id;\n    body.body = activity.body;\n    body.is_schedule = activity.is_schedule;\n    body.schedule_date = activity.schedule_date;\n    body.schedule_done = activity.schedule_done;\n    if (isEdit) {\n      body.activity_id = activity._id;\n      Api.editActivity(body, (resp) => {\n        if(resp.status){\n          setShow(false);\n          props.parentCallback();\n        }\n      });\n    } else {\n      Api.newActivity(body, (resp) => {\n        if(resp.status){\n          setShow(false);\n          props.parentCallback();\n        }\n      });\n    }\n  };\n  return (\n    <Modal show={show} onHide={() => {}}>\n      <ModalHeader>\n        <ModalTitle>{isEdit ? \"Edit Activity\" : \"New Activity\"}</ModalTitle>\n      </ModalHeader>\n      <ModalBody>\n        <Form>\n          <FormGroup>\n            <FormLabel>Description</FormLabel>\n            <FormControl\n              type=\"text\"\n              placeholder=\"Description\"\n              value={activity.body}\n              onChange={(e) =>\n                setActivity({ ...activity, body: e.target.value })\n              }\n            ></FormControl>\n          </FormGroup>\n          <FormLabel>Set Reminder</FormLabel>\n          <InputGroup>\n            <InputGroup.Prepend>\n              <InputGroup.Checkbox\n                checked={activity.is_schedule}\n                onChange={(e) =>\n                  setActivity({\n                    ...activity,\n                    is_schedule: !activity.is_schedule,\n                  })\n                }\n              />\n            </InputGroup.Prepend>\n            <ReactDatePicker\n              as={FormControl}\n              selected={activity.schedule_date}\n              onChange={(dt) =>\n                setActivity({ ...activity, schedule_date: new Date(dt) })\n              }\n            />\n          </InputGroup>\n        </Form>\n      </ModalBody>\n      <ModalFooter>\n        <Button variant=\"primary\" onClick={submitForm}>\n          Save\n        </Button>\n        <Button\n          variant=\"secondary\"\n          onClick={() => {\n            setShow(false);\n            props.parentCallback();\n          }}\n        >\n          Cancel\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n});\n\nexport default ActivityModal;\n",["54","55"],"/home/ravi/practice/trackinterview/app/src/components/Login.js",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":7,"column":15,"nodeType":"62","messageId":"63","endLine":7,"endColumn":22},{"ruleId":"64","severity":1,"message":"65","line":42,"column":7,"nodeType":"66","endLine":42,"endColumn":9,"suggestions":"67"},{"ruleId":"64","severity":1,"message":"68","line":107,"column":20,"nodeType":"62","endLine":107,"endColumn":29},{"ruleId":"60","severity":1,"message":"69","line":2,"column":50,"nodeType":"62","messageId":"63","endLine":2,"endColumn":55},{"ruleId":"64","severity":1,"message":"70","line":32,"column":6,"nodeType":"66","endLine":32,"endColumn":8,"suggestions":"71"},{"ruleId":"60","severity":1,"message":"72","line":30,"column":10,"nodeType":"62","messageId":"63","endLine":30,"endColumn":14},{"ruleId":"60","severity":1,"message":"73","line":30,"column":16,"nodeType":"62","messageId":"63","endLine":30,"endColumn":23},{"ruleId":"56","replacedBy":"74"},{"ruleId":"58","replacedBy":"75"},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"no-unused-vars","'setUser' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMyJobs'. Either include it or remove the dependency array.","ArrayExpression",["78"],"Assignments to the 'job_id' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","'Modal' is defined but never used.","React Hook useEffect has a missing dependency: 'getJobDetails'. Either include it or remove the dependency array.",["79"],"'date' is assigned a value but never used.","'setDate' is assigned a value but never used.",["76"],["77"],"no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},{"desc":"82","fix":"83"},"Update the dependencies array to be: [getMyJobs]",{"range":"84","text":"85"},"Update the dependencies array to be: [getJobDetails]",{"range":"86","text":"87"},[1269,1271],"[getMyJobs]",[915,917],"[getJobDetails]"]